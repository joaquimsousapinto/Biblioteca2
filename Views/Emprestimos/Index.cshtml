@model X.PagedList.IPagedList<Emprestimo>
@using Biblioteca2.Models;
@using X.PagedList;
@using X.PagedList.Mvc.Core
@{
    ViewData["Title"] = "Lista de Empréstimos";
    string q = ViewData["q"]?.ToString() ?? "";
}
<div class="border-bottom pt-4 pb-2 mb-3">
    <div class="row">
        <div class=" col-md-9">
            <h2><i class="fa fa-book text-danger"></i> @ViewBag.Title</h2>
        </div>
        <div class="col-md-3">
            <form method="get" asp-action="Index" novalidate="novalidate">
                <input type="hidden" name="page" value="1" />
                <div class="row">
                    <div class="col-8">
                        <div class="form-floating">
                            <input id="q" class="form-control form-control-sm" type="text" name="q" value="@q" data-val="true" data-val-required="Campo de preenchimento obrigatório." />
                            <label for="q">Insira o número do empréstimo</label>
                            <span data-valmsg-for="q" data-valmsg-replace="true" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-4 text-end">
                        <button type="submit" class="btn btn-default btn-sm" title="Filtrar"><i class="fa fa-search small"></i></button>
                        <a asp-action="Index" class="btn btn-default btn-sm" title="Limpar o filtro"><i class="fa fa-times"></i></a>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
@if (Model.Count() > 0)
{
    <div class="row">
        <div class="col-sm-1">
            <a asp-action="Create" class="btn btn-default btn-sm" title="Criar Novo"><i class="fa fa-plus"></i></a>
        </div>
        <div class="col-sm-3 small">
            @Html.Raw(String.Format("Página: {0} de {1}", (Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber), Model.PageCount))<br />
            @Html.Raw(String.Format("Entradas: {0}-{1} de {2}", (Model.PageNumber - 1) * Model.PageSize + 1, (Model.TotalItemCount > Model.PageNumber * Model.PageSize ? Model.PageNumber * Model.PageSize : Model.TotalItemCount), Model.TotalItemCount.ToString("N0")))
        </div>
        <div class="col-sm-8 small">
            @if (Model.PageCount > 1)
            {
                @Html.PagedListPager(Model, page => Url.Action("Index", new { page, q }), new PagedListRenderOptions { LinkToFirstPageFormat = "&#8676;", LinkToPreviousPageFormat = "&#8592;", DisplayLinkToPreviousPage = PagedListDisplayMode.Never, LinkToNextPageFormat = "&#8594;", DisplayLinkToNextPage = PagedListDisplayMode.Never, LinkToLastPageFormat = "&#8677;", ContainerDivClasses = new[] { "pagination justify-content-end small" }, MaximumPageNumbersToDisplay = 6 })
            }
        </div>
    </div>
    <table class="table table-striped table-sm align-middle mt-2">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.First().Id)</th>
                <th>@Html.DisplayNameFor(model => model.First().DataEmprestimo)</th>
                <th>@Html.DisplayNameFor(model => model.First().DataDevolucaoPrevista)</th>
                <th>@Html.DisplayNameFor(model => model.First().DataDevolucaoReal)</th>
                <th>@Html.DisplayNameFor(model => model.First().Estado)</th>
                <th>@Html.DisplayNameFor(model => model.First().Utilizador)</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Id)</td>
                    <td>@Html.DisplayFor(modelItem => item.DataEmprestimo)</td>
                    <td>@Html.DisplayFor(modelItem => item.DataDevolucaoPrevista)</td>
                    <td>@Html.DisplayFor(modelItem => item.DataDevolucaoReal)</td>
                    <td>@Html.DisplayFor(modelItem => item.Estado.Nome)</td>
                    <td>@Html.DisplayFor(modelItem => item.Utilizador.Nome)</td>
                    <td class="text-end">
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-default btn-xs" title="Editar"><i class="fa fa-edit"></i></a>
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-default btn-xs" title="Ver detalhes"><i class="fa fa-eye"></i></a>
                        @if (item.EmprestimoLivros.Count == 0)
                        {
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-default btn-xs" title="Apagar"><i class="fa fa-trash-o"></i></a>
                        }
                        else
                        {
                            <span class="btn btn-default btn-xs" title="[Não é possível apagar o registo]"><i class="fa fa-times disabled text-danger"></i></span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    @if (string.IsNullOrEmpty(q))
    {
        <a asp-action="Create" class="btn btn-default btn-sm" title="Criar Novo"><i class="fa fa-plus"></i></a>
    }
    <h4 class="mt-2"><i class="fa fa-info-circle"></i> Informação</h4>
    <p>Não existem neste momento elementos para representar.</p>
}
<p class="small" title="Tempo de criação da página"><i class="fa fa-clock-o"></i> @ViewBag.ElapsedMilliseconds.ToString("N0") ms</p>
<partial name="_ToastStatus" />
@section Scripts {
    <script>
        $('document').ready(function () {
            $(".toast").toast('show');
        });
    </script>
}
